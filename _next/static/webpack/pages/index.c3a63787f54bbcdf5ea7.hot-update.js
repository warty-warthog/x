webpackHotUpdate_N_E("pages/index",{

/***/ "./assets/lib/vanta.waves.min.js":
false,

/***/ "./assets/libs/vanta.waves.min.js":
/*!****************************************!*\
  !*** ./assets/libs/vanta.waves.min.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var _inherits = __webpack_require__(/*! @babel/runtime/helpers/inherits */ \"./node_modules/@babel/runtime/helpers/inherits.js\");\n\nvar _possibleConstructorReturn = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\");\n\nvar _getPrototypeOf = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/getPrototypeOf.js\");\n\nvar _classCallCheck = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/classCallCheck.js\");\n\nvar _createClass = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/createClass.js\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n!function (t, e) {\n   true ? module.exports = e() : undefined;\n}('undefined' != typeof self ? self : this, function () {\n  return function (t) {\n    var e = {};\n\n    function i(s) {\n      if (e[s]) return e[s].exports;\n      var o = e[s] = {\n        i: s,\n        l: !1,\n        exports: {}\n      };\n      return t[s].call(o.exports, o, o.exports, i), o.l = !0, o.exports;\n    }\n\n    return i.m = t, i.c = e, i.d = function (t, e, s) {\n      i.o(t, e) || Object.defineProperty(t, e, {\n        enumerable: !0,\n        get: s\n      });\n    }, i.r = function (t) {\n      'undefined' != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {\n        value: 'Module'\n      }), Object.defineProperty(t, '__esModule', {\n        value: !0\n      });\n    }, i.t = function (t, e) {\n      if (1 & e && (t = i(t)), 8 & e) return t;\n      if (4 & e && 'object' == typeof t && t && t.__esModule) return t;\n      var s = Object.create(null);\n      if (i.r(s), Object.defineProperty(s, 'default', {\n        enumerable: !0,\n        value: t\n      }), 2 & e && 'string' != typeof t) for (var o in t) {\n        i.d(s, o, function (e) {\n          return t[e];\n        }.bind(null, o));\n      }\n      return s;\n    }, i.n = function (t) {\n      var e = t && t.__esModule ? function () {\n        return t[\"default\"];\n      } : function () {\n        return t;\n      };\n      return i.d(e, 'a', e), e;\n    }, i.o = function (t, e) {\n      return Object.prototype.hasOwnProperty.call(t, e);\n    }, i.p = '', i(i.s = 17);\n  }({\n    0: function _(t, e, i) {\n      'use strict';\n\n      function s(t, e) {\n        for (var _i in e) {\n          e.hasOwnProperty(_i) && (t[_i] = e[_i]);\n        }\n\n        return t;\n      }\n\n      function o() {\n        return 'undefined' != typeof navigator ? /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth < 600 : null;\n      }\n\n      i.d(e, 'c', function () {\n        return s;\n      }), i.d(e, 'e', function () {\n        return o;\n      }), i.d(e, 'i', function () {\n        return n;\n      }), i.d(e, 'h', function () {\n        return r;\n      }), i.d(e, 'g', function () {\n        return h;\n      }), i.d(e, 'f', function () {\n        return a;\n      }), i.d(e, 'a', function () {\n        return c;\n      }), i.d(e, 'b', function () {\n        return u;\n      }), i.d(e, 'd', function () {\n        return l;\n      }), Number.prototype.clamp = function (t, e) {\n        return Math.min(Math.max(this, t), e);\n      };\n\n      var n = function n(t) {\n        return t[Math.floor(Math.random() * t.length)];\n      };\n\n      function r(t, e) {\n        return null == t && (t = 0), null == e && (e = 1), t + Math.random() * (e - t);\n      }\n\n      function h(t, e) {\n        return null == t && (t = 0), null == e && (e = 1), Math.floor(t + Math.random() * (e - t + 1));\n      }\n\n      var a = function a(t) {\n        return document.querySelector(t);\n      },\n          c = function c(t) {\n        return 'number' == typeof t ? '#' + ('00000' + t.toString(16)).slice(-6) : t;\n      },\n          u = function u(t) {\n        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n        var i = c(t),\n            s = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(i),\n            o = s ? {\n          r: parseInt(s[1], 16),\n          g: parseInt(s[2], 16),\n          b: parseInt(s[3], 16)\n        } : null;\n        return 'rgba(' + o.r + ',' + o.g + ',' + o.b + ',' + e + ')';\n      },\n          l = function l(t) {\n        return 0.299 * t.r + 0.587 * t.g + 0.114 * t.b;\n      };\n    },\n    1: function _(t, e, i) {\n      'use strict';\n\n      i.d(e, 'a', function () {\n        return r;\n      });\n      var s = i(0);\n      var o = true;\n      var n = o && window.THREE || {};\n      o && !window.VANTA && (window.VANTA = {});\n      var r = o && window.VANTA || {};\n      r.register = function (t, e) {\n        return r[t] = function (t) {\n          return new e(t);\n        };\n      }, r.version = '0.5.18';\n\n      var h = function h() {\n        return Array.prototype.unshift.call(arguments, '[VANTA]'), console.error.apply(this, arguments);\n      };\n\n      r.VantaBase = /*#__PURE__*/function () {\n        function _class() {\n          var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n          _classCallCheck(this, _class);\n\n          if (!o) return !1;\n          r.current = this, this.windowMouseMoveWrapper = this.windowMouseMoveWrapper.bind(this), this.windowTouchWrapper = this.windowTouchWrapper.bind(this), this.windowGyroWrapper = this.windowGyroWrapper.bind(this), this.resize = this.resize.bind(this), this.animationLoop = this.animationLoop.bind(this), this.restart = this.restart.bind(this);\n          var e = 'function' == typeof this.getDefaultOptions ? this.getDefaultOptions() : this.defaultOptions;\n          if (this.options = Object(s.c)({\n            mouseControls: !0,\n            touchControls: !0,\n            gyroControls: !1,\n            minHeight: 200,\n            minWidth: 200,\n            scale: 1,\n            scaleMobile: 1\n          }, e), (t instanceof HTMLElement || 'string' == typeof t) && (t = {\n            el: t\n          }), Object(s.c)(this.options, t), this.options.THREE && (n = this.options.THREE), this.el = this.options.el, null == this.el) h('Instance needs \"el\" param!');else if (!(this.options.el instanceof HTMLElement)) {\n            var _t = this.el;\n            if (this.el = Object(s.f)(_t), !this.el) return void h('Cannot find element', _t);\n          }\n          this.prepareEl(), this.initThree(), this.setSize();\n\n          try {\n            this.init();\n          } catch (t) {\n            return h('Init error', t), this.renderer && this.renderer.domElement && this.el.removeChild(this.renderer.domElement), void (this.options.backgroundColor && (console.log('[VANTA] Falling back to backgroundColor'), this.el.style.background = Object(s.a)(this.options.backgroundColor)));\n          }\n\n          this.initMouse(), this.resize(), this.animationLoop();\n          var i = window.addEventListener;\n          i('resize', this.resize), window.requestAnimationFrame(this.resize), this.options.mouseControls && (i('scroll', this.windowMouseMoveWrapper), i('mousemove', this.windowMouseMoveWrapper)), this.options.touchControls && (i('touchstart', this.windowTouchWrapper), i('touchmove', this.windowTouchWrapper)), this.options.gyroControls && i('deviceorientation', this.windowGyroWrapper);\n        }\n\n        _createClass(_class, [{\n          key: \"setOptions\",\n          value: function setOptions() {\n            var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            Object(s.c)(this.options, t), this.triggerMouseMove();\n          }\n        }, {\n          key: \"prepareEl\",\n          value: function prepareEl() {\n            var t, e;\n            if ('undefined' != typeof Node && Node.TEXT_NODE) for (t = 0; t < this.el.childNodes.length; t++) {\n              var _e = this.el.childNodes[t];\n\n              if (_e.nodeType === Node.TEXT_NODE) {\n                var _t2 = document.createElement('span');\n\n                _t2.textContent = _e.textContent, _e.parentElement.insertBefore(_t2, _e), _e.remove();\n              }\n            }\n\n            for (t = 0; t < this.el.children.length; t++) {\n              e = this.el.children[t], 'static' === getComputedStyle(e).position && (e.style.position = 'relative'), 'auto' === getComputedStyle(e).zIndex && (e.style.zIndex = 1);\n            }\n\n            'static' === getComputedStyle(this.el).position && (this.el.style.position = 'relative');\n          }\n        }, {\n          key: \"applyCanvasStyles\",\n          value: function applyCanvasStyles(t) {\n            var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n            Object(s.c)(t.style, {\n              position: 'absolute',\n              zIndex: 0,\n              top: 0,\n              left: 0,\n              background: ''\n            }), Object(s.c)(t.style, e), t.classList.add('vanta-canvas');\n          }\n        }, {\n          key: \"initThree\",\n          value: function initThree() {\n            n.WebGLRenderer ? (this.renderer = new n.WebGLRenderer({\n              alpha: !0,\n              antialias: !0\n            }), this.el.appendChild(this.renderer.domElement), this.applyCanvasStyles(this.renderer.domElement), isNaN(this.options.backgroundAlpha) && (this.options.backgroundAlpha = 1), this.scene = new n.Scene()) : console.warn('[VANTA] No THREE defined on window');\n          }\n        }, {\n          key: \"getCanvasElement\",\n          value: function getCanvasElement() {\n            return this.renderer ? this.renderer.domElement : this.p5renderer ? this.p5renderer.canvas : void 0;\n          }\n        }, {\n          key: \"getCanvasRect\",\n          value: function getCanvasRect() {\n            var t = this.getCanvasElement();\n            return !!t && t.getBoundingClientRect();\n          }\n        }, {\n          key: \"windowMouseMoveWrapper\",\n          value: function windowMouseMoveWrapper(t) {\n            var e = this.getCanvasRect();\n            if (!e) return !1;\n            var i = t.clientX - e.left,\n                s = t.clientY - e.top;\n            i >= 0 && s >= 0 && i <= e.width && s <= e.height && (this.mouseX = i, this.mouseY = s, this.options.mouseEase || this.triggerMouseMove(i, s));\n          }\n        }, {\n          key: \"windowTouchWrapper\",\n          value: function windowTouchWrapper(t) {\n            var e = this.getCanvasRect();\n            if (!e) return !1;\n\n            if (1 === t.touches.length) {\n              var _i2 = t.touches[0].clientX - e.left,\n                  _s = t.touches[0].clientY - e.top;\n\n              _i2 >= 0 && _s >= 0 && _i2 <= e.width && _s <= e.height && (this.mouseX = _i2, this.mouseY = _s, this.options.mouseEase || this.triggerMouseMove(_i2, _s));\n            }\n          }\n        }, {\n          key: \"windowGyroWrapper\",\n          value: function windowGyroWrapper(t) {\n            var e = this.getCanvasRect();\n            if (!e) return !1;\n            var i = Math.round(2 * t.alpha) - e.left,\n                s = Math.round(2 * t.beta) - e.top;\n            i >= 0 && s >= 0 && i <= e.width && s <= e.height && (this.mouseX = i, this.mouseY = s, this.options.mouseEase || this.triggerMouseMove(i, s));\n          }\n        }, {\n          key: \"triggerMouseMove\",\n          value: function triggerMouseMove(t, e) {\n            void 0 === t && void 0 === e && (this.options.mouseEase ? (t = this.mouseEaseX, e = this.mouseEaseY) : (t = this.mouseX, e = this.mouseY)), this.uniforms && (this.uniforms.iMouse.value.x = t / this.scale, this.uniforms.iMouse.value.y = e / this.scale);\n            var i = t / this.width,\n                s = e / this.height;\n            'function' == typeof this.onMouseMove && this.onMouseMove(i, s);\n          }\n        }, {\n          key: \"setSize\",\n          value: function setSize() {\n            this.scale || (this.scale = 1), Object(s.e)() && this.options.scaleMobile ? this.scale = this.options.scaleMobile : this.options.scale && (this.scale = this.options.scale), this.width = Math.max(this.el.offsetWidth, this.options.minWidth), this.height = Math.max(this.el.offsetHeight, this.options.minHeight);\n          }\n        }, {\n          key: \"initMouse\",\n          value: function initMouse() {\n            (!this.mouseX && !this.mouseY || this.mouseX === this.options.minWidth / 2 && this.mouseY === this.options.minHeight / 2) && (this.mouseX = this.width / 2, this.mouseY = this.height / 2, this.triggerMouseMove(this.mouseX, this.mouseY));\n          }\n        }, {\n          key: \"resize\",\n          value: function resize() {\n            this.setSize(), this.camera && (this.camera.aspect = this.width / this.height, 'function' == typeof this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix()), this.renderer && (this.renderer.setSize(this.width, this.height), this.renderer.setPixelRatio(window.devicePixelRatio / this.scale)), 'function' == typeof this.onResize && this.onResize();\n          }\n        }, {\n          key: \"isOnScreen\",\n          value: function isOnScreen() {\n            var t = this.el.offsetHeight,\n                e = this.el.getBoundingClientRect(),\n                i = window.pageYOffset || (document.documentElement || document.body.parentNode || document.body).scrollTop,\n                s = e.top + i;\n            return s - window.innerHeight <= i && i <= s + t;\n          }\n        }, {\n          key: \"animationLoop\",\n          value: function animationLoop() {\n            return this.t || (this.t = 0), this.t += 1, this.t2 || (this.t2 = 0), this.t2 += this.options.speed || 1, this.uniforms && (this.uniforms.iTime.value = 0.016667 * this.t2), this.options.mouseEase && (this.mouseEaseX = this.mouseEaseX || this.mouseX || 0, this.mouseEaseY = this.mouseEaseY || this.mouseY || 0, Math.abs(this.mouseEaseX - this.mouseX) + Math.abs(this.mouseEaseY - this.mouseY) > 0.1 && (this.mouseEaseX += 0.05 * (this.mouseX - this.mouseEaseX), this.mouseEaseY += 0.05 * (this.mouseY - this.mouseEaseY), this.triggerMouseMove(this.mouseEaseX, this.mouseEaseY))), (this.isOnScreen() || this.options.forceAnimate) && ('function' == typeof this.onUpdate && this.onUpdate(), this.scene && this.camera && (this.renderer.render(this.scene, this.camera), this.renderer.setClearColor(this.options.backgroundColor, this.options.backgroundAlpha)), this.fps && this.fps.update && this.fps.update(), 'function' == typeof this.afterRender && this.afterRender()), this.req = window.requestAnimationFrame(this.animationLoop);\n          }\n        }, {\n          key: \"restart\",\n          value: function restart() {\n            if (this.scene) for (; this.scene.children.length;) {\n              this.scene.remove(this.scene.children[0]);\n            }\n            'function' == typeof this.onRestart && this.onRestart(), this.init();\n          }\n        }, {\n          key: \"init\",\n          value: function init() {\n            'function' == typeof this.onInit && this.onInit();\n          }\n        }, {\n          key: \"destroy\",\n          value: function destroy() {\n            'function' == typeof this.onDestroy && this.onDestroy();\n            var t = window.removeEventListener;\n            t('touchstart', this.windowTouchWrapper), t('touchmove', this.windowTouchWrapper), t('scroll', this.windowMouseMoveWrapper), t('mousemove', this.windowMouseMoveWrapper), t('deviceorientation', this.windowGyroWrapper), t('resize', this.resize), window.cancelAnimationFrame(this.req), this.renderer && (this.renderer.domElement && this.el.removeChild(this.renderer.domElement), this.renderer = null, this.scene = null);\n          }\n        }]);\n\n        return _class;\n      }(), e.b = r.VantaBase;\n    },\n    17: function _(t, e, i) {\n      'use strict';\n\n      i.r(e);\n      var s = i(1),\n          o = i(0);\n      var n =  true && window.THREE;\n\n      var r = /*#__PURE__*/function (_s$b) {\n        _inherits(r, _s$b);\n\n        var _super = _createSuper(r);\n\n        _createClass(r, null, [{\n          key: \"initClass\",\n          value: function initClass() {\n            this.prototype.ww = 100, this.prototype.hh = 80, this.prototype.waveNoise = 4;\n          }\n        }]);\n\n        function r(t) {\n          var _this;\n\n          _classCallCheck(this, r);\n\n          n = t.THREE || n, _this = _super.call(this, t);\n          return _this;\n        }\n\n        _createClass(r, [{\n          key: \"getMaterial\",\n          value: function getMaterial() {\n            var t = {\n              color: this.options.color,\n              shininess: this.options.shininess,\n              flatShading: !0,\n              vertexColors: n.FaceColors,\n              side: n.DoubleSide\n            };\n            return new n.MeshPhongMaterial(t);\n          }\n        }, {\n          key: \"onInit\",\n          value: function onInit() {\n            var t, e;\n            var i = this.getMaterial(),\n                s = new n.Geometry();\n\n            for (this.gg = [], t = 0; t <= this.ww; t++) {\n              for (this.gg[t] = [], e = 0; e <= this.hh; e++) {\n                var _i3 = s.vertices.length,\n                    _r = new n.Vector3(18 * (t - 0.5 * this.ww), Object(o.h)(0, this.waveNoise) - 10, 18 * (0.5 * this.hh - e));\n\n                s.vertices.push(_r), this.gg[t][e] = _i3;\n              }\n            }\n\n            for (t = 1; t <= this.ww; t++) {\n              for (e = 1; e <= this.hh; e++) {\n                var _i4 = void 0,\n                    _r2 = void 0;\n\n                var _h = this.gg[t][e],\n                    a = this.gg[t][e - 1],\n                    c = this.gg[t - 1][e],\n                    u = this.gg[t - 1][e - 1];\n                Object(o.g)(0, 1) ? (_i4 = new n.Face3(u, a, c), _r2 = new n.Face3(a, c, _h)) : (_i4 = new n.Face3(u, a, _h), _r2 = new n.Face3(u, c, _h)), s.faces.push(_i4, _r2);\n              }\n            }\n\n            this.plane = new n.Mesh(s, i), this.scene.add(this.plane);\n            var r = new n.AmbientLight(16777215, 0.9);\n            this.scene.add(r);\n            var h = new n.PointLight(16777215, 0.9);\n            h.position.set(-100, 250, -100), this.scene.add(h), this.camera = new n.PerspectiveCamera(35, this.width / this.height, 50, 1e4);\n            this.cameraPosition = new n.Vector3(240, 200, 390), this.cameraTarget = new n.Vector3(140, -30, 190), this.camera.position.copy(this.cameraPosition), this.scene.add(this.camera), this.onUpdate();\n          }\n        }, {\n          key: \"onUpdate\",\n          value: function onUpdate() {\n            var t;\n            this.plane.material.color.set(this.options.color), this.plane.material.shininess = this.options.shininess, this.camera.ox = this.cameraPosition.x / this.options.zoom, this.camera.oy = this.cameraPosition.y / this.options.zoom, this.camera.oz = this.cameraPosition.z / this.options.zoom, null != this.controls && this.controls.update();\n            var e = this.camera;\n            Math.abs(e.tx - e.position.x) > 0.01 && (t = e.tx - e.position.x, e.position.x += 0.02 * t), Math.abs(e.ty - e.position.y) > 0.01 && (t = e.ty - e.position.y, e.position.y += 0.02 * t), Math.abs(e.tz - e.position.z) > 0.01 && (t = e.tz - e.position.z, e.position.z += 0.02 * t), e.lookAt(this.cameraTarget);\n\n            for (var _t3 = 0; _t3 < this.plane.geometry.vertices.length; _t3++) {\n              var _e2 = this.plane.geometry.vertices[_t3];\n\n              if (_e2.oy) {\n                var _t4 = this.options.waveSpeed,\n                    _i5 = Math.sqrt(_t4) * Math.cos(-_e2.x - 0.7 * _e2.z),\n                    _s2 = Math.sin(_t4 * this.t * 0.02 - _t4 * _e2.x * 0.025 + _t4 * _e2.z * 0.015 + _i5),\n                    _o = Math.pow(_s2 + 1, 2) / 4;\n\n                _e2.y = _e2.oy + _o * this.options.waveHeight;\n              } else _e2.oy = _e2.y;\n            }\n\n            this.plane.geometry.dynamic = !0, this.plane.geometry.computeFaceNormals(), this.plane.geometry.verticesNeedUpdate = !0, this.plane.geometry.normalsNeedUpdate = !0, this.wireframe && (this.wireframe.geometry.fromGeometry(this.plane.geometry), this.wireframe.geometry.computeFaceNormals());\n          }\n        }, {\n          key: \"onMouseMove\",\n          value: function onMouseMove(t, e) {\n            var i = this.camera;\n            return i.oy || (i.oy = i.position.y, i.ox = i.position.x, i.oz = i.position.z), i.tx = i.ox + 100 * (t - 0.5) / this.options.zoom, i.ty = i.oy + -100 * (e - 0.5) / this.options.zoom, i.tz = i.oz + -50 * (t - 0.5) / this.options.zoom;\n          }\n        }]);\n\n        return r;\n      }(s.b);\n\n      r.prototype.defaultOptions = {\n        color: 21896,\n        shininess: 30,\n        waveHeight: 15,\n        waveSpeed: 1,\n        zoom: 1\n      }, r.initClass(), e[\"default\"] = s.a.register('WAVES', r);\n    }\n  });\n});\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./assets/libs/vanta.waves.min.js\n");

/***/ }),

/***/ "./components/Wallpaper.tsx":
/*!**********************************!*\
  !*** ./components/Wallpaper.tsx ***!
  \**********************************/
/*! exports provided: renderWallpaperEffect */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"renderWallpaperEffect\", function() { return renderWallpaperEffect; });\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n/* harmony import */ var _assets_libs_vanta_waves_min__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../assets/libs/vanta.waves.min */ \"./assets/libs/vanta.waves.min.js\");\n/* harmony import */ var _assets_libs_vanta_waves_min__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_assets_libs_vanta_waves_min__WEBPACK_IMPORTED_MODULE_2__);\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n // https://www.vantajs.com/\n// TODO: Change color like rainbow effect? Can be changed dynamicly on demo site.\n\nvar vantaJsSettings = {\n  gyroControls: false,\n  mouseControls: false,\n  touchControls: false,\n  color: 0x101f34,\n  shininess: 15,\n  waveHeight: 25,\n  waveSpeed: 0.5,\n  zoom: 0.9\n};\nvar renderWallpaperEffect = function renderWallpaperEffect(_ref) {\n  var renderElement = _ref.current;\n  return _assets_libs_vanta_waves_min__WEBPACK_IMPORTED_MODULE_2___default()(_objectSpread({\n    el: renderElement,\n    THREE: three__WEBPACK_IMPORTED_MODULE_1__\n  }, vantaJsSettings));\n};\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9XYWxscGFwZXIudHN4PzM5MzMiXSwibmFtZXMiOlsidmFudGFKc1NldHRpbmdzIiwiZ3lyb0NvbnRyb2xzIiwibW91c2VDb250cm9scyIsInRvdWNoQ29udHJvbHMiLCJjb2xvciIsInNoaW5pbmVzcyIsIndhdmVIZWlnaHQiLCJ3YXZlU3BlZWQiLCJ6b29tIiwicmVuZGVyV2FsbHBhcGVyRWZmZWN0IiwicmVuZGVyRWxlbWVudCIsImN1cnJlbnQiLCJXQVZFUyIsImVsIiwiVEhSRUUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUNBO0NBQ29EO0FBRXBEOztBQUVBLElBQU1BLGVBQWUsR0FBRztBQUN0QkMsY0FBWSxFQUFFLEtBRFE7QUFFdEJDLGVBQWEsRUFBRSxLQUZPO0FBR3RCQyxlQUFhLEVBQUUsS0FITztBQUl0QkMsT0FBSyxFQUFFLFFBSmU7QUFLdEJDLFdBQVMsRUFBRSxFQUxXO0FBTXRCQyxZQUFVLEVBQUUsRUFOVTtBQU90QkMsV0FBUyxFQUFFLEdBUFc7QUFRdEJDLE1BQUksRUFBRTtBQVJnQixDQUF4QjtBQWVPLElBQU1DLHFCQUFxQixHQUFHLFNBQXhCQSxxQkFBd0I7QUFBQSxNQUMxQkMsYUFEMEIsUUFDbkNDLE9BRG1DO0FBQUEsU0FHbkNDLG1FQUFLO0FBQ0hDLE1BQUUsRUFBRUgsYUFERDtBQUVISSxTQUFLLEVBQUxBLGtDQUFLQTtBQUZGLEtBR0FkLGVBSEEsRUFIOEI7QUFBQSxDQUE5QiIsImZpbGUiOiIuL2NvbXBvbmVudHMvV2FsbHBhcGVyLnRzeC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUmVmT2JqZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0IFdBVkVTIGZyb20gJy4uL2Fzc2V0cy9saWJzL3ZhbnRhLndhdmVzLm1pbic7IC8vIGh0dHBzOi8vd3d3LnZhbnRhanMuY29tL1xuXG4vLyBUT0RPOiBDaGFuZ2UgY29sb3IgbGlrZSByYWluYm93IGVmZmVjdD8gQ2FuIGJlIGNoYW5nZWQgZHluYW1pY2x5IG9uIGRlbW8gc2l0ZS5cblxuY29uc3QgdmFudGFKc1NldHRpbmdzID0ge1xuICBneXJvQ29udHJvbHM6IGZhbHNlLFxuICBtb3VzZUNvbnRyb2xzOiBmYWxzZSxcbiAgdG91Y2hDb250cm9sczogZmFsc2UsXG4gIGNvbG9yOiAweDEwMWYzNCxcbiAgc2hpbmluZXNzOiAxNSxcbiAgd2F2ZUhlaWdodDogMjUsXG4gIHdhdmVTcGVlZDogMC41LFxuICB6b29tOiAwLjlcbn07XG5cbmV4cG9ydCB0eXBlIFdhbGxwYXBlckVmZmVjdCA9IHtcbiAgZGVzdHJveTogKCkgPT4gdm9pZDtcbn07XG5cbmV4cG9ydCBjb25zdCByZW5kZXJXYWxscGFwZXJFZmZlY3QgPSAoe1xuICBjdXJyZW50OiByZW5kZXJFbGVtZW50XG59OiBSZWZPYmplY3Q8SFRNTEVsZW1lbnQ+KTogV2FsbHBhcGVyRWZmZWN0ID0+XG4gIFdBVkVTKHtcbiAgICBlbDogcmVuZGVyRWxlbWVudCxcbiAgICBUSFJFRSxcbiAgICAuLi52YW50YUpzU2V0dGluZ3NcbiAgfSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/Wallpaper.tsx\n");

/***/ })

})