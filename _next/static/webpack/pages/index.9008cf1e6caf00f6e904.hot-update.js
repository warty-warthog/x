webpackHotUpdate_N_E("pages/index",{

/***/ "./assets/lib/clippyjs/index.js":
/*!**************************************!*\
  !*** ./assets/lib/clippyjs/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function (global, factory) {\n   true ? module.exports = factory(__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")) : undefined;\n})(this, function ($) {\n  'use strict';\n\n  $ = 'default' in $ ? $['default'] : $;\n\n  var Queue = function Queue(onEmptyCallback) {\n    this._queue = [];\n    this._onEmptyCallback = onEmptyCallback;\n  };\n  /***\n   *\n   * @param {function(Function)} func\n   * @returns {jQuery.Deferred}\n   */\n\n\n  Queue.prototype.queue = function queue(func) {\n    this._queue.push(func);\n\n    if (this._queue.length === 1 && !this._active) {\n      this._progressQueue();\n    }\n  };\n\n  Queue.prototype._progressQueue = function _progressQueue() {\n    // stop if nothing left in queue\n    if (!this._queue.length) {\n      this._onEmptyCallback();\n\n      return;\n    }\n\n    var f = this._queue.shift();\n\n    this._active = true; // execute function\n\n    var completeFunction = $.proxy(this.next, this);\n    f(completeFunction);\n  };\n\n  Queue.prototype.clear = function clear() {\n    this._queue = [];\n  };\n\n  Queue.prototype.next = function next() {\n    this._active = false;\n\n    this._progressQueue();\n  };\n\n  var Animator = function Animator(el, path, data, sounds) {\n    var this$1 = this;\n    this._el = el;\n    this._data = data;\n    this._path = path;\n    this._currentFrameIndex = 0;\n    this._currentFrame = undefined;\n    this._exiting = false;\n    this._currentAnimation = undefined;\n    this._endCallback = undefined;\n    this._started = false;\n    this._sounds = {};\n    this.currentAnimationName = undefined;\n    this.preloadSounds(sounds);\n    this._muted = true;\n    this._overlays = [this._el];\n    var curr = this._el;\n\n    this._setupElement(this._el);\n\n    for (var i = 1; i < this._data.overlayCount; i++) {\n      var inner = this$1._setupElement($('<div></div>'));\n\n      curr.append(inner);\n\n      this$1._overlays.push(inner);\n\n      curr = inner;\n    }\n  };\n\n  Animator.prototype.mute = function mute(mute) {\n    this._muted = mute;\n  };\n\n  Animator.prototype._setupElement = function _setupElement(el) {\n    var frameSize = this._data.framesize;\n    el.css('display', \"none\");\n    el.css({\n      width: frameSize[0],\n      height: frameSize[1]\n    });\n    el.css('background', \"url('\" + this._path + \"/map.png') no-repeat\");\n    return el;\n  };\n\n  Animator.prototype.animations = function animations() {\n    var r = [];\n    var d = this._data.animations;\n\n    for (var n in d) {\n      r.push(n);\n    }\n\n    return r;\n  };\n\n  Animator.prototype.preloadSounds = function preloadSounds(sounds) {\n    var this$1 = this;\n\n    for (var i = 0; i < this._data.sounds.length; i++) {\n      var snd = this$1._data.sounds[i];\n      var uri = sounds[snd];\n\n      if (!uri) {\n        continue;\n      }\n\n      this$1._sounds[snd] = new Audio(uri);\n    }\n  };\n\n  Animator.prototype.hasAnimation = function hasAnimation(name) {\n    return !!this._data.animations[name];\n  };\n\n  Animator.prototype.exitAnimation = function exitAnimation() {\n    this._exiting = true;\n  };\n\n  Animator.prototype.showAnimation = function showAnimation(animationName, stateChangeCallback) {\n    this._exiting = false;\n\n    if (!this.hasAnimation(animationName)) {\n      return false;\n    }\n\n    this._currentAnimation = this._data.animations[animationName];\n    this.currentAnimationName = animationName;\n\n    if (!this._started) {\n      this._step();\n\n      this._started = true;\n    }\n\n    this._currentFrameIndex = 0;\n    this._currentFrame = undefined;\n    this._endCallback = stateChangeCallback;\n    return true;\n  };\n\n  Animator.prototype._draw = function _draw() {\n    var this$1 = this;\n    var images = [];\n\n    if (this._currentFrame) {\n      images = this._currentFrame.images || [];\n    }\n\n    for (var i = 0; i < this._overlays.length; i++) {\n      if (i < images.length) {\n        var xy = images[i];\n        var bg = -xy[0] + 'px ' + -xy[1] + 'px';\n\n        this$1._overlays[i].css({\n          'background-position': bg,\n          'display': 'block'\n        });\n      } else {\n        this$1._overlays[i].css('display', 'none');\n      }\n    }\n  };\n\n  Animator.prototype._getNextAnimationFrame = function _getNextAnimationFrame() {\n    if (!this._currentAnimation) {\n      return undefined;\n    } // No current frame. start animation.\n\n\n    if (!this._currentFrame) {\n      return 0;\n    }\n\n    var currentFrame = this._currentFrame;\n    var branching = this._currentFrame.branching;\n\n    if (this._exiting && currentFrame.exitBranch !== undefined) {\n      return currentFrame.exitBranch;\n    } else if (branching) {\n      var rnd = Math.random() * 100;\n\n      for (var i = 0; i < branching.branches.length; i++) {\n        var branch = branching.branches[i];\n\n        if (rnd <= branch.weight) {\n          return branch.frameIndex;\n        }\n\n        rnd -= branch.weight;\n      }\n    }\n\n    return this._currentFrameIndex + 1;\n  };\n\n  Animator.prototype._playSound = function _playSound() {\n    var s = this._currentFrame.sound;\n\n    if (!s) {\n      return;\n    }\n\n    var audio = this._sounds[s];\n\n    if (audio) {\n      audio.play();\n    }\n  };\n\n  Animator.prototype._atLastFrame = function _atLastFrame() {\n    return this._currentFrameIndex >= this._currentAnimation.frames.length - 1;\n  };\n\n  Animator.prototype._step = function _step() {\n    if (!this._currentAnimation) {\n      return;\n    }\n\n    var newFrameIndex = Math.min(this._getNextAnimationFrame(), this._currentAnimation.frames.length - 1);\n    var frameChanged = !this._currentFrame || this._currentFrameIndex !== newFrameIndex;\n    this._currentFrameIndex = newFrameIndex; // always switch frame data, unless we're at the last frame of an animation with a useExitBranching flag.\n\n    if (!(this._atLastFrame() && this._currentAnimation.useExitBranching)) {\n      this._currentFrame = this._currentAnimation.frames[this._currentFrameIndex];\n    }\n\n    this._draw();\n\n    if (!this._muted) {\n      this._playSound();\n    }\n\n    this._loop = window.setTimeout($.proxy(this._step, this), this._currentFrame.duration); // fire events if the frames changed and we reached an end\n\n    if (this._endCallback && frameChanged && this._atLastFrame()) {\n      if (this._currentAnimation.useExitBranching && !this._exiting) {\n        this._endCallback(this.currentAnimationName, Animator.States.WAITING);\n      } else {\n        this._endCallback(this.currentAnimationName, Animator.States.EXITED);\n      }\n    }\n  };\n  /***\n   * Pause animation execution\n   */\n\n\n  Animator.prototype.pause = function pause() {\n    window.clearTimeout(this._loop);\n  };\n  /***\n   * Resume animation\n   */\n\n\n  Animator.prototype.resume = function resume() {\n    this._step();\n  };\n\n  Animator.States = {\n    WAITING: 1,\n    EXITED: 0\n  };\n\n  var Balloon = function Balloon(targetEl) {\n    this._targetEl = targetEl;\n    this._hidden = true;\n\n    this._setup();\n\n    this.WORD_SPEAK_TIME = 200;\n    this.CLOSE_BALLOON_DELAY = 2000;\n    this._BALLOON_MARGIN = 15;\n  };\n\n  Balloon.prototype._setup = function _setup() {\n    this._balloon = $('<div class=\"clippy-balloon\"><div class=\"clippy-tip\"></div><div class=\"clippy-content\"></div></div> ').hide();\n    this._content = this._balloon.find('.clippy-content');\n    $(this._targetEl).append(this._balloon);\n  };\n\n  Balloon.prototype.reposition = function reposition() {\n    var this$1 = this;\n    var sides = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\n\n    for (var i = 0; i < sides.length; i++) {\n      var s = sides[i];\n\n      this$1._position(s);\n\n      if (!this$1._isOut()) {\n        break;\n      }\n    }\n  };\n  /***\n   *\n   * @param side\n   * @private\n   */\n\n\n  Balloon.prototype._position = function _position(side) {\n    var o = this._targetEl.offset();\n\n    var h = this._targetEl.height();\n\n    var w = this._targetEl.width();\n\n    o.top -= $(window).scrollTop();\n    o.left -= $(window).scrollLeft();\n\n    var bH = this._balloon.outerHeight();\n\n    var bW = this._balloon.outerWidth();\n\n    this._balloon.removeClass('clippy-top-left');\n\n    this._balloon.removeClass('clippy-top-right');\n\n    this._balloon.removeClass('clippy-bottom-right');\n\n    this._balloon.removeClass('clippy-bottom-left');\n\n    var left, top;\n\n    switch (side) {\n      case 'top-left':\n        // right side of the balloon next to the right side of the agent\n        left = o.left + w - bW;\n        top = o.top - bH - this._BALLOON_MARGIN;\n        break;\n\n      case 'top-right':\n        // left side of the balloon next to the left side of the agent\n        left = o.left;\n        top = o.top - bH - this._BALLOON_MARGIN;\n        break;\n\n      case 'bottom-right':\n        // right side of the balloon next to the right side of the agent\n        left = o.left;\n        top = o.top + h + this._BALLOON_MARGIN;\n        break;\n\n      case 'bottom-left':\n        // left side of the balloon next to the left side of the agent\n        left = o.left + w - bW;\n        top = o.top + h + this._BALLOON_MARGIN;\n        break;\n    }\n\n    this._balloon.css({\n      top: top,\n      left: left\n    });\n\n    this._balloon.addClass('clippy-' + side);\n  };\n\n  Balloon.prototype._isOut = function _isOut() {\n    var o = this._balloon.offset();\n\n    var bH = this._balloon.outerHeight();\n\n    var bW = this._balloon.outerWidth();\n\n    var wW = $(window).width();\n    var wH = $(window).height();\n    var sT = $(document).scrollTop();\n    var sL = $(document).scrollLeft();\n    var top = o.top - sT;\n    var left = o.left - sL;\n    var m = 5;\n\n    if (top - m < 0 || left - m < 0) {\n      return true;\n    }\n\n    return top + bH + m > wH || left + bW + m > wW;\n  };\n\n  Balloon.prototype.speak = function speak(complete, text, hold) {\n    this._hidden = false;\n    this.show();\n    var c = this._content; // set height to auto\n\n    c.height('auto');\n    c.width('auto'); // add the text\n\n    c.text(text); // set height\n\n    c.height(c.height());\n    c.width(c.width());\n    c.text('');\n    this.reposition();\n    this._complete = complete;\n\n    this._sayWords(text, hold, complete);\n  };\n\n  Balloon.prototype.show = function show() {\n    if (this._hidden) {\n      return;\n    }\n\n    this._balloon.show();\n  };\n\n  Balloon.prototype.hide = function hide(fast) {\n    if (fast) {\n      this._balloon.hide();\n\n      return;\n    }\n\n    this._hiding = window.setTimeout($.proxy(this._finishHideBalloon, this), this.CLOSE_BALLOON_DELAY);\n  };\n\n  Balloon.prototype._finishHideBalloon = function _finishHideBalloon() {\n    if (this._active) {\n      return;\n    }\n\n    this._balloon.hide();\n\n    this._hidden = true;\n    this._hiding = null;\n  };\n\n  Balloon.prototype._sayWords = function _sayWords(text, hold, complete) {\n    this._active = true;\n    this._hold = hold;\n    var words = text.split(/[^\\S-]/);\n    var time = this.WORD_SPEAK_TIME;\n    var el = this._content;\n    var idx = 1;\n    this._addWord = $.proxy(function () {\n      if (!this._active) {\n        return;\n      }\n\n      if (idx > words.length) {\n        delete this._addWord;\n        this._active = false;\n\n        if (!this._hold) {\n          complete();\n          this.hide();\n        }\n      } else {\n        el.text(words.slice(0, idx).join(' '));\n        idx++;\n        this._loop = window.setTimeout($.proxy(this._addWord, this), time);\n      }\n    }, this);\n\n    this._addWord();\n  };\n\n  Balloon.prototype.close = function close() {\n    if (this._active) {\n      this._hold = false;\n    } else if (this._hold) {\n      this._complete();\n    }\n  };\n\n  Balloon.prototype.pause = function pause() {\n    window.clearTimeout(this._loop);\n\n    if (this._hiding) {\n      window.clearTimeout(this._hiding);\n      this._hiding = null;\n    }\n  };\n\n  Balloon.prototype.resume = function resume() {\n    if (this._addWord) {\n      this._addWord();\n    } else if (!this._hold && !this._hidden) {\n      this._hiding = window.setTimeout($.proxy(this._finishHideBalloon, this), this.CLOSE_BALLOON_DELAY);\n    }\n  };\n\n  var Agent = function Agent(path, data, sounds) {\n    this.path = path;\n    this._queue = new Queue($.proxy(this._onQueueEmpty, this));\n    this._el = $('<div class=\"clippy\"></div>').hide();\n    $(document.body).append(this._el);\n    this._animator = new Animator(this._el, path, data, sounds);\n    this._balloon = new Balloon(this._el);\n\n    this._setupEvents();\n  };\n  /***\n   *\n   * @param {Number} x\n   * @param {Number} y\n   */\n\n\n  Agent.prototype.gestureAt = function gestureAt(x, y) {\n    var d = this._getDirection(x, y);\n\n    var gAnim = 'Gesture' + d;\n    var lookAnim = 'Look' + d;\n    var animation = this.hasAnimation(gAnim) ? gAnim : lookAnim;\n    return this.play(animation);\n  };\n  /***\n   *\n   * @param {Boolean=} fast\n   *\n   */\n\n\n  Agent.prototype.hide = function hide(fast, callback) {\n    this._hidden = true;\n    var el = this._el;\n    this.stop();\n\n    if (fast) {\n      this._el.hide();\n\n      this.stop();\n      this.pause();\n\n      if (callback) {\n        callback();\n      }\n\n      return;\n    }\n\n    return this._playInternal('Hide', function () {\n      el.hide();\n      this.pause();\n\n      if (callback) {\n        callback();\n      }\n    });\n  };\n\n  Agent.prototype.moveTo = function moveTo(x, y, duration) {\n    var dir = this._getDirection(x, y);\n\n    var anim = 'Move' + dir;\n\n    if (duration === undefined) {\n      duration = 1000;\n    }\n\n    this._addToQueue(function (complete) {\n      // the simple case\n      if (duration === 0) {\n        this._el.css({\n          top: y,\n          left: x\n        });\n\n        this.reposition();\n        complete();\n        return;\n      } // no animations\n\n\n      if (!this.hasAnimation(anim)) {\n        this._el.animate({\n          top: y,\n          left: x\n        }, duration, complete);\n\n        return;\n      }\n\n      var callback = $.proxy(function (name, state) {\n        // when exited, complete\n        if (state === Animator.States.EXITED) {\n          complete();\n        } // if waiting,\n\n\n        if (state === Animator.States.WAITING) {\n          this._el.animate({\n            top: y,\n            left: x\n          }, duration, $.proxy(function () {\n            // after we're done with the movement, do the exit animation\n            this._animator.exitAnimation();\n          }, this));\n        }\n      }, this);\n\n      this._playInternal(anim, callback);\n    }, this);\n  };\n\n  Agent.prototype._playInternal = function _playInternal(animation, callback) {\n    // if we're inside an idle animation,\n    if (this._isIdleAnimation() && this._idleDfd && this._idleDfd.state() === 'pending') {\n      this._idleDfd.done($.proxy(function () {\n        this._playInternal(animation, callback);\n      }, this));\n    }\n\n    this._animator.showAnimation(animation, callback);\n  };\n\n  Agent.prototype.mute = function mute(mute) {\n    this._animator.mute(mute);\n  };\n\n  Agent.prototype.play = function play(animation, timeout, cb) {\n    if (!this.hasAnimation(animation)) {\n      return false;\n    }\n\n    if (timeout === undefined) {\n      timeout = 5000;\n    }\n\n    this._addToQueue(function (complete) {\n      var completed = false; // handle callback\n\n      var callback = function callback(name, state) {\n        if (state === Animator.States.EXITED) {\n          completed = true;\n\n          if (cb) {\n            cb();\n          }\n\n          complete();\n        }\n      }; // if has timeout, register a timeout function\n\n\n      if (timeout) {\n        window.setTimeout($.proxy(function () {\n          if (completed) {\n            return;\n          } // exit after timeout\n\n\n          this._animator.exitAnimation();\n        }, this), timeout);\n      }\n\n      this._playInternal(animation, callback);\n    }, this);\n\n    return true;\n  };\n  /***\n   *\n   * @param {Boolean=} fast\n   */\n\n\n  Agent.prototype.show = function show(_ref) {\n    var x = _ref.x,\n        y = _ref.y,\n        fast = _ref.fast;\n    this._hidden = false;\n\n    if (fast) {\n      this._el.show();\n\n      this.resume();\n\n      this._onQueueEmpty();\n\n      return;\n    }\n\n    if (this._el.css('top') === 'auto' || !this._el.css('left') === 'auto') {\n      var left = x || $(window).width() * 0.8;\n      var top = y || ($(window).height() + $(document).scrollTop()) * 0.8;\n\n      this._el.css({\n        top: top,\n        left: left\n      });\n    }\n\n    this.resume();\n    return this.play('Show');\n  };\n  /***\n   *\n   * @param {String} text\n   */\n\n\n  Agent.prototype.speak = function speak(text, hold) {\n    this._addToQueue(function (complete) {\n      this._balloon.speak(complete, text, hold);\n    }, this);\n  };\n  /***\n   * Close the current balloon\n   */\n\n\n  Agent.prototype.closeBalloon = function closeBalloon() {\n    this._balloon.hide();\n  };\n\n  Agent.prototype.delay = function delay(time) {\n    time = time || 250;\n\n    this._addToQueue(function (complete) {\n      this._onQueueEmpty();\n\n      window.setTimeout(complete, time);\n    });\n  };\n  /***\n   * Skips the current animation\n   */\n\n\n  Agent.prototype.stopCurrent = function stopCurrent() {\n    this._animator.exitAnimation();\n\n    this._balloon.close();\n  };\n\n  Agent.prototype.stop = function stop() {\n    // clear the queue\n    this._queue.clear();\n\n    this._animator.exitAnimation();\n\n    this._balloon.hide();\n  };\n  /***\n   *\n   * @param {String} name\n   * @returns {Boolean}\n   */\n\n\n  Agent.prototype.hasAnimation = function hasAnimation(name) {\n    return this._animator.hasAnimation(name);\n  };\n  /***\n   * Gets a list of animation names\n   *\n   * @return {Array.<string>}\n   */\n\n\n  Agent.prototype.animations = function animations() {\n    return this._animator.animations();\n  };\n  /***\n   * Play a random animation\n   * @return {jQuery.Deferred}\n   */\n\n\n  Agent.prototype.animate = function animate() {\n    var animations = this.animations();\n    var anim = animations[Math.floor(Math.random() * animations.length)]; // skip idle animations\n\n    if (anim.indexOf('Idle') === 0) {\n      return this.animate();\n    }\n\n    return this.play(anim);\n  };\n  /**************************** Utils ************************************/\n\n  /***\n   *\n   * @param {Number} x\n   * @param {Number} y\n   * @return {String}\n   * @private\n   */\n\n\n  Agent.prototype._getDirection = function _getDirection(x, y) {\n    var offset = this._el.offset();\n\n    var h = this._el.height();\n\n    var w = this._el.width();\n\n    var centerX = offset.left + w / 2;\n    var centerY = offset.top + h / 2;\n    var a = centerY - y;\n    var b = centerX - x;\n    var r = Math.round(180 * Math.atan2(a, b) / Math.PI); // Left and Right are for the character, not the screen :-/\n\n    if (-45 <= r && r < 45) {\n      return 'Right';\n    }\n\n    if (45 <= r && r < 135) {\n      return 'Up';\n    }\n\n    if (135 <= r && r <= 180 || -180 <= r && r < -135) {\n      return 'Left';\n    }\n\n    if (-135 <= r && r < -45) {\n      return 'Down';\n    } // sanity check\n\n\n    return 'Top';\n  };\n  /**************************** Queue and Idle handling ************************************/\n\n  /***\n   * Handle empty queue.\n   * We need to transition the animation to an idle state\n   * @private\n   */\n\n\n  Agent.prototype._onQueueEmpty = function _onQueueEmpty() {\n    if (this._hidden || this._isIdleAnimation()) {\n      return;\n    }\n\n    var idleAnim = this._getIdleAnimation();\n\n    this._idleDfd = $.Deferred();\n\n    this._animator.showAnimation(idleAnim, $.proxy(this._onIdleComplete, this));\n  };\n\n  Agent.prototype._onIdleComplete = function _onIdleComplete(name, state) {\n    if (state === Animator.States.EXITED) {\n      this._idleDfd.resolve();\n    }\n  };\n  /***\n   * Is the current animation is Idle?\n   * @return {Boolean}\n   * @private\n   */\n\n\n  Agent.prototype._isIdleAnimation = function _isIdleAnimation() {\n    var c = this._animator.currentAnimationName;\n    return c && c.indexOf('Idle') === 0;\n  };\n  /**\n   * Gets a random Idle animation\n   * @return {String}\n   * @private\n   */\n\n\n  Agent.prototype._getIdleAnimation = function _getIdleAnimation() {\n    var animations = this.animations();\n    var r = [];\n\n    for (var i = 0; i < animations.length; i++) {\n      var a = animations[i];\n\n      if (a.indexOf('Idle') === 0) {\n        r.push(a);\n      }\n    } // pick one\n\n\n    var idx = Math.floor(Math.random() * r.length);\n    return r[idx];\n  };\n  /**************************** Events ************************************/\n\n\n  Agent.prototype._setupEvents = function _setupEvents() {\n    $(window).on('resize', $.proxy(this.reposition, this));\n\n    this._el.on('mousedown', $.proxy(this._onMouseDown, this));\n\n    this._el.on('dblclick', $.proxy(this._onDoubleClick, this));\n  };\n\n  Agent.prototype._onDoubleClick = function _onDoubleClick() {\n    if (!this.play('ClickedOn')) {\n      this.animate();\n    }\n  };\n\n  Agent.prototype.reposition = function reposition() {\n    if (!this._el.is(':visible')) {\n      return;\n    }\n\n    var o = this._el.offset();\n\n    var bH = this._el.outerHeight();\n\n    var bW = this._el.outerWidth();\n\n    var wW = $(window).width();\n    var wH = $(window).height();\n    var sT = $(window).scrollTop();\n    var sL = $(window).scrollLeft();\n    var top = o.top - sT;\n    var left = o.left - sL;\n    var m = 5;\n\n    if (top - m < 0) {\n      top = m;\n    } else if (top + bH + m > wH) {\n      top = wH - bH - m;\n    }\n\n    if (left - m < 0) {\n      left = m;\n    } else if (left + bW + m > wW) {\n      left = wW - bW - m;\n    }\n\n    this._el.css({\n      left: left,\n      top: top\n    }); // reposition balloon\n\n\n    this._balloon.reposition();\n  };\n\n  Agent.prototype._onMouseDown = function _onMouseDown(e) {\n    e.preventDefault();\n\n    this._startDrag(e);\n  };\n  /**************************** Drag ************************************/\n\n\n  Agent.prototype._startDrag = function _startDrag(e) {\n    // pause animations\n    this.pause();\n\n    this._balloon.hide(true);\n\n    this._offset = this._calculateClickOffset(e);\n    this._moveHandle = $.proxy(this._dragMove, this);\n    this._upHandle = $.proxy(this._finishDrag, this);\n    $(window).on('mousemove', this._moveHandle);\n    $(window).on('mouseup', this._upHandle);\n    this._dragUpdateLoop = window.setTimeout($.proxy(this._updateLocation, this), 10);\n  };\n\n  Agent.prototype._calculateClickOffset = function _calculateClickOffset(e) {\n    var mouseX = e.pageX;\n    var mouseY = e.pageY;\n\n    var o = this._el.offset();\n\n    return {\n      top: mouseY - o.top,\n      left: mouseX - o.left\n    };\n  };\n\n  Agent.prototype._updateLocation = function _updateLocation() {\n    this._el.css({\n      top: this._targetY,\n      left: this._targetX\n    });\n\n    this._dragUpdateLoop = window.setTimeout($.proxy(this._updateLocation, this), 10);\n  };\n\n  Agent.prototype._dragMove = function _dragMove(e) {\n    e.preventDefault();\n    var x = e.clientX - this._offset.left;\n    var y = e.clientY - this._offset.top;\n    this._targetX = x;\n    this._targetY = y;\n  };\n\n  Agent.prototype._finishDrag = function _finishDrag() {\n    window.clearTimeout(this._dragUpdateLoop); // remove handles\n\n    $(window).off('mousemove', this._moveHandle);\n    $(window).off('mouseup', this._upHandle); // resume animations\n\n    this._balloon.show();\n\n    this.reposition();\n    this.resume();\n  };\n\n  Agent.prototype._addToQueue = function _addToQueue(func, scope) {\n    if (scope) {\n      func = $.proxy(func, scope);\n    }\n\n    this._queue.queue(func);\n  };\n  /**************************** Pause and Resume ************************************/\n\n\n  Agent.prototype.pause = function pause() {\n    this._animator.pause();\n\n    this._balloon.pause();\n  };\n\n  Agent.prototype.resume = function resume() {\n    this._animator.resume();\n\n    this._balloon.resume();\n  };\n\n  var load = function load(name, successCb, base_path, failCb) {\n    base_path = base_path || window.CLIPPY_CDN || 'https://gitcdn.xyz/repo/pi0/clippyjs/master/assets/agents/';\n    var path = base_path + name;\n\n    var mapDfd = load._loadMap(path);\n\n    var agentDfd = load._loadAgent(name, path);\n\n    var soundsDfd = load._loadSounds(name, path);\n\n    var data;\n    agentDfd.done(function (d) {\n      data = d;\n    });\n    var sounds;\n    soundsDfd.done(function (d) {\n      sounds = d;\n    }); // wrapper to the success callback\n\n    var cb = function cb() {\n      var a = new Agent(path, data, sounds);\n      successCb(a);\n    };\n\n    $.when(mapDfd, agentDfd, soundsDfd).done(cb).fail(failCb);\n  };\n\n  load._loadMap = function _loadMap(path) {\n    var dfd = load._maps[path];\n\n    if (dfd) {\n      return dfd;\n    } // set dfd if not defined\n\n\n    dfd = load._maps[path] = $.Deferred();\n    var src = path + '/map.png';\n    var img = new Image();\n    img.onload = dfd.resolve;\n    img.onerror = dfd.reject; // start loading the map;\n\n    img.setAttribute('src', src);\n    return dfd.promise();\n  };\n\n  load._loadSounds = function _loadSounds(name, path) {\n    var dfd = load._sounds[name];\n\n    if (dfd) {\n      return dfd;\n    } // set dfd if not defined\n\n\n    dfd = load._sounds[name] = $.Deferred();\n    var audio = document.createElement('audio');\n    var canPlayMp3 = !!audio.canPlayType && \"\" !== audio.canPlayType('audio/mpeg');\n    var canPlayOgg = !!audio.canPlayType && \"\" !== audio.canPlayType('audio/ogg; codecs=\"vorbis\"');\n\n    if (!canPlayMp3 && !canPlayOgg) {\n      dfd.resolve({});\n    } else {\n      var src = path + (canPlayMp3 ? '/sounds-mp3.js' : '/sounds-ogg.js'); // load\n\n      load._loadScript(src);\n    }\n\n    return dfd.promise();\n  };\n\n  load._loadAgent = function _loadAgent(name, path) {\n    var dfd = load._data[name];\n\n    if (dfd) {\n      return dfd;\n    }\n\n    dfd = load._getAgentDfd(name);\n    var src = path + '/agent.js';\n\n    load._loadScript(src);\n\n    return dfd.promise();\n  };\n\n  load._loadScript = function _loadScript(src) {\n    var script = document.createElement('script');\n    script.setAttribute('src', src);\n    script.setAttribute('async', 'async');\n    script.setAttribute('type', 'text/javascript');\n    document.head.appendChild(script);\n  };\n\n  load._getAgentDfd = function _getAgentDfd(name) {\n    var dfd = load._data[name];\n\n    if (!dfd) {\n      dfd = load._data[name] = $.Deferred();\n    }\n\n    return dfd;\n  };\n\n  load._maps = {};\n  load._sounds = {};\n  load._data = {};\n\n  function ready(name, data) {\n    var dfd = load._getAgentDfd(name);\n\n    dfd.resolve(data);\n  }\n\n  function soundsReady(name, data) {\n    var dfd = load._sounds[name];\n\n    if (!dfd) {\n      dfd = load._sounds[name] = $.Deferred();\n    }\n\n    dfd.resolve(data);\n  }\n\n  var clippy = {\n    Agent: Agent,\n    Animator: Animator,\n    Queue: Queue,\n    Balloon: Balloon,\n    load: load,\n    ready: ready,\n    soundsReady: soundsReady\n  };\n\n  if (true) {\n    window.clippy = clippy;\n  }\n\n  return clippy;\n});\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./assets/lib/clippyjs/index.js\n");

/***/ })

})